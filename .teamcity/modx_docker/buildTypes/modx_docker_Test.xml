<?xml version="1.0" encoding="UTF-8"?>
<build-type xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" uuid="5c8cd8e9-7017-4cbd-97b3-21a04f0d6481" xsi:noNamespaceSchemaLocation="https://www.jetbrains.com/teamcity/schemas/2021.1/project-config.xsd">
  <name>Test</name>
  <description />
  <settings>
    <options>
      <option name="cleanBuild" value="true" />
    </options>
    <parameters>
      <param name="env.NGINX_PORT" value="0" />
    </parameters>
    <build-runners>
      <runner id="make_remake" name="make remake" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[cp .env.example .env

make remake]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="make_down" name="make down" type="simpleRunner">
        <parameters>
          <param name="script.content" value="make down" />
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
      <runner id="simpleRunner" name="Cypress" type="simpleRunner">
        <parameters>
          <param name="script.content"><![CDATA[#!/bin/bash

directory_name=$(basename "%system.teamcity.build.checkoutDir%")
container_name="$directory_name-nginx-1"

# Получаем ID контейнера
container_id=$(docker ps -qf "name=$container_name")

# Проверяем, что контейнер существует
if [ -z "$container_id" ]; then
    echo "Контейнер с именем '$container_name' не найден."
    exit 1
fi

echo "Контейнер '$container_name' найден."
ports=$(docker inspect --format='{{range $port := .NetworkSettings.Ports}}{{(index $port 0).HostPort}}{{end}}' "$container_id")

# Проверяем, что порт не пустой
if [ -z "$ports" ]; then
    echo "Порт для контейнера '$container_name' не найден."
    exit 1
fi

echo "Контейнер '$container_name' работает на порту $ports."



docker run \
      -e CYPRESS_BASE_URL="http://tc.local:$ports/" \
      -v $(pwd)/cypress.config.js:/e2e/cypress.config.js \
      -v $(pwd)/cypress:/e2e/cypress \
      webnitros/cypress-runners-mac:latest \
      --config-file cypress.config.js]]></param>
          <param name="teamcity.step.mode" value="default" />
          <param name="use.custom.script" value="true" />
        </parameters>
      </runner>
    </build-runners>
    <vcs-settings>
      <vcs-entry-ref root-id="Modxcheckingaddons_HttpsGithubComWebnitrosModxDockerRefsHeadsMaster" />
    </vcs-settings>
    <requirements />
    <build-triggers>
      <build-trigger id="TRIGGER_2" type="vcsTrigger">
        <parameters>
          <param name="branchFilter" value="+:*" />
          <param name="enableQueueOptimization" value="true" />
          <param name="quietPeriodMode" value="DO_NOT_USE" />
        </parameters>
      </build-trigger>
    </build-triggers>
    <build-extensions>
      <extension id="perfmon" type="perfmon">
        <parameters>
          <param name="teamcity.perfmon.feature.enabled" value="true" />
        </parameters>
      </extension>
      <extension id="DockerSupport" type="DockerSupport">
        <parameters>
          <param name="login2registry" value="PROJECT_EXT_3" />
          <param name="loginCheckbox" value="on" />
        </parameters>
      </extension>
      <extension id="approval-feature" type="approval-feature">
        <parameters>
          <param name="manualStartIsApproval" value="true" />
          <param name="rules" value="group:ALL_USERS_GROUP:1" />
          <param name="timeout" value="10" />
        </parameters>
      </extension>
      <extension id="BUILD_EXT_2" type="BuildFailureOnMessage">
        <parameters>
          <param name="buildFailureOnMessage.conditionType" value="contains" />
          <param name="buildFailureOnMessage.messagePattern" value="Service temporarily unavailable" />
          <param name="buildFailureOnMessage.outputText" value="Service temporarily unavailable" />
          <param name="buildFailureOnMessage.reverse" value="false" />
        </parameters>
      </extension>
    </build-extensions>
    <dependencies>
      <depend-on sourceBuildTypeId="modx_docker_install_modx">
        <options>
          <option name="run-build-if-dependency-failed" value="RUN_ADD_PROBLEM" />
        </options>
      </depend-on>
    </dependencies>
    <cleanup />
  </settings>
</build-type>

